# Basics of R programming for Data Analysis

>*Reference:* @kabacoff2022r, @mayor2015learning.
## Running Basic R Commands

1.  **In the Console panel:** Type the following commands and press Enter after each one:

    ```{r}
    1 + 1
    x <- 10
    print(x)
    ```

    You should see the output of the commands printed in the console.

2.  **Create a new R Script:**
    *   Click File -> New File -> R Script.
    *   Type the same commands from above into the script.
    *   Save the script as `lesson1.R`.

3.  **Run the script:**
    *   Click the "Source" button in the script editor (or press Ctrl+Shift+Enter).
    *   The commands in the script will be executed in the console.

## Installing and Loading Packages

R packages are collections of functions, data, and documentation that extend the capabilities of R. The `tidyverse` package is a collection of popular packages for data science.

1.  **Install the `tidyverse` package:** In the Console, type the following command and press Enter:

    ```r
    install.packages("tidyverse")
    ```

    R will download and install the `tidyverse` package and its dependencies.  This may take a few minutes.

2.  **Load the `tidyverse` package:** In the Console or in your script, type the following command and press Enter:

    ```r
    library(tidyverse)
    ```

    This loads the `tidyverse` package into your R session, making its functions available for use.

## Downloading Sample Data

We'll use a sample CSV file for demonstration.

*   **Download the `exam_scores.csv` file** from the course materials to your data directory. You can also copy this link for downloading directly into R.: [Sample CSV Data](https://raw.githubusercontent.com/sijuswamyresearch/R-for-Data-Analytics/refs/heads/main/data/exam_scores.csv)

## Inspecting Data

Now, let's read the `exam_scores.csv` file into R and inspect it:

```{r}
#Replace this link with your actual link to your data.

exam_scores <- read.csv("https://raw.githubusercontent.com/sijuswamyresearch/R-for-Data-Analytics/refs/heads/main/data/exam_scores.csv")

#Display the first few rows.
head(exam_scores)
```

## Data Input and Data Types

### Data Types in R

R supports several fundamental data types:

1.  **Numeric:** Numbers (e.g., `1`, `3.14`, `-2.5`).
2.  **Character:** Text strings (e.g., `"hello"`, `"Data Analysis"`).
3.  **Factor:** Categorical variables (e.g., `"Low"`, `"Medium"`, `"High"`). Factors are important for statistical analysis.
4.  **Logical:** Boolean values, `TRUE` or `FALSE`.
5.  **Date:** Dates and times (e.g., `"2023-10-27"`).

### Checking Data Types

The `class()` function tells you the data type of a variable:

```{r}
x <- 10
class(x)
y <- "hello"
class(y)
```

### Converting Data Types

You can convert between data types using the `as.*()` functions:

```
as.numeric()

as.character()

as.factor()

as.logical()

as.Date()

```

>*Example:*

```{r}
x <- "123"
class(x)
x_numeric <- as.numeric(x)
class(x_numeric)
```


:::{.callout-note}
### Important Note: 

Converting a character string that doesn't represent a number to numeric will result in NA.
:::


## Lists, Arrays, and Data Frames in R


## 1. Lists

Lists are versatile data structures that can hold elements of different types. A list can contain numbers, strings, vectors, arrays, or even other lists.

### Creating Lists

You can create a list using the `list()` function.

#### Example 1: Creating a Simple List

```{r}
# Creating a simple list
my_list <- list(name = "John", age = 30, grades = c(85, 90, 78))
print(my_list)
```

### Accessing List Elements

You can access list elements using their names or indices.

#### Example 2: Accessing List Elements by Name
```{r}
# Accessing list elements by name
name <- my_list$name
age <- my_list$age
print(paste("Name:", name))
print(paste("Age:", age))
```

#### Example 3: Accessing List Elements by Index

```{r}
# Accessing list elements by index
name <- my_list[[1]]
age <- my_list[[2]]
print(paste("Name:", name))
print(paste("Age:", age))
```

### Modifying Lists

You can modify lists by adding, updating, or deleting elements.

```{r}
# Adding elements to a list
my_list$city <- "New York"
print(my_list)
```

```{r}
# Updating list elements
my_list$age <- 31
print(my_list)
```

```{r}
# Deleting list elements
my_list$grades <- NULL
print(my_list)
```

## 2. Arrays
Arrays are data structures that can hold elements of the same type in multiple dimensions.

### Creating Arrays
You can create an array using the `array()` function.

```{r}
#one dimensional array
a1=array(1:10)
print(a1)
```

```{r}
# Creating a 2D array (matrix)
my_matrix <- array(data = 1:9, dim = c(3, 3))
print(my_matrix)
```
```{r}
# creating matrix using matrix function
m1=matrix(c(1,2,3,4,5,6,7,8,9),ncol=3,byrow=T)
m1
```

```{r}
# Creating a 3D array
my_3d_array <- array(data = 1:27, dim = c(3, 3, 3))
print(my_3d_array)
```

```{r}
# Accessing array elements
my_matrix
element <- my_matrix[2, 3]
print(paste("Element at (2, 3):", element))
```

```{r}
# Modifying array elements
my_matrix[1, 1] <- 10
print(my_matrix)
```

### Array Operations
You can perform various operations on arrays, such as transposing and performing arithmetic operations.

```{r}
# Transposing a matrix
transposed_matrix <- t(my_matrix)
print(transposed_matrix)
```

```{r}
# Creating another matrix
another_matrix <- array(data = 10:18, dim = c(3, 3))

# Matrix multiplication
multiplied_matrix <- my_matrix %*% another_matrix
print(multiplied_matrix)
```

## 3. Data Frames
Data frames are table-like data structures that organize data into rows and columns. Each column can hold data of a different type.

You can create a data frame using the `data.frame()` function.

```{r}
# Creating a data frame
my_data_frame <- data.frame(
  id = 1:3,
  name = c("Alice", "Bob", "Charlie"),
  age = c(25, 30, 28),
  score = c(85, 92, 78)
)
print(my_data_frame)
```

### Accessing Data Frame Elements
You can access data frame elements using their column names or indices.

```{r}
# Accessing data frame columns by name
names <- my_data_frame$name
ages <- my_data_frame$age
print(names)
print(ages)
```

### Modifying Data Frames

You can modify data frames by adding, updating, or deleting columns and rows.

```{r}
# Adding a column to a data frame
my_data_frame$city <- c("New York", "Los Angeles", "Chicago")
print(my_data_frame)
```

```{r}
# Updating data frame elements
my_data_frame$age[1] <- 26
print(my_data_frame)
```

```{r}
# Deleting a column from a data frame
my_data_frame$city <- NULL
print(my_data_frame)
```

```{r}
# Adding rows to a data frame
new_row <- data.frame(id = 4, name = "David", age = 32, score = 90)
my_data_frame <- rbind(my_data_frame, new_row)
print(my_data_frame)
```

```{r}
#adding a column using cbind
new_col=data.frame(city=c("Kottayam","Ettumanoor","Elanji","Muvattupuzha"))
my_data_frame=cbind(my_data_frame,new_col)
my_data_frame
```

```{r}
# Deleting rows from a data frame
my_data_frame <- my_data_frame[-4, ]
print(my_data_frame)
```

### Data Frame Operations
You can perform various operations on data frames, such as subsetting, filtering, sorting, and merging.

```{r}
# Subsetting data frames
subset_df <- my_data_frame[, c("name", "score")]
print(subset_df)
```

```{r}
# Filtering data frames
filtered_df <- my_data_frame[my_data_frame$age > 28, ]
print(filtered_df)
```

```{r}
# Sorting data frames
sorted_df <- my_data_frame[order(my_data_frame$age), ]
print(sorted_df)
```